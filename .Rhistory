i1 <- filter(dat, 8 <= dat$Hour, dat$Hour < 12)
i2 <- filter(dat, 12 <= dat$Hour, dat$Hour < 19)
i3 <- filter(dat, (19 <= dat$Hour & dat$Hour <= 23) | (0 <= dat$Hour & dat$Hour < 8))
#How many Offenses are made per interval in each category
sum1 <- group_by(i1, Beat) %>% summarise(num=sum(X..offenses))
sum2 <- group_by(i2, Beat) %>% summarise(num=sum(X..offenses))
sum3 <- group_by(i3, Beat) %>% summarise(num=sum(X..offenses))
#How many offenses are made per offense type
sum4 <- group_by(dat, Offense.Type) %>% summarise(num=sum(X..offenses))
#How many offenses are made per offense type in each beat
sum5 <- group_by(dat, Offense.Type, Beat) %>% summarise(num=sum(X..offenses))
dat %>% summarise(avg.Off=mean(dat$X..offenses),
cen.OffTp=centralValue(dat$Offense.Type),
cen.StrNm=centralValue(dat$StreetName))
barplot(c(sum(sum1$num), sum(sum2$num), sum(sum3$num)), names.arg = c("8-12", "12-19", "19-8"), main = "Total crimes over time intervals")
beat <- group_by(dat, Beat) %>% summarise(num=sum(X..offenses))
most <- head(arrange(beat,desc(num)))
barplot(most$num, names.arg=most$Beat, main="Beats with most crimes")
least <- head(arrange(beat, num))
barplot(least$num, names.arg=least$Beat, main="Beats with least crimes")
boxplot(beat$num, main="Distribution of number of crimes per beat")
offenses <- group_by(dat, Offense.Type) %>%
filter(Offense.Type != 1) %>% summarize(total=sum(X..offenses))
barplot(offenses$total, names.arg=offenses$Offense.Type,
main="Number of occurences per crime type")
fiscalDate <- function(arg) {
date <- arg[2]
hour <- arg[1]
if (as.integer(hour) >= 0 && as.integer(hour) < 8)
return(as.character(ymd(date)-1));
return(as.character(ymd(date)));
}
#Identification of the time period
hourType <- function(hour) {
hour <- as.integer(hour)
if (8 <= hour && hour < 12)
return(1)
if (12 <= hour && hour < 19)
return(2)
return(3)
}
args <- mapply(c, dat$Hour, as.character(dat$Date), SIMPLIFY = FALSE)
dat <- mutate(dat, HourType=sapply(Hour, hourType))
dat <- mutate(dat, FiscalDate=sapply(args, fiscalDate))
##Descriptors: Beat and HourType
##Target variable: X..offenses
modelDat <- group_by(dat, FiscalDate, Beat, HourType) %>% summarize(N=sum(X..offenses))
nn <- nnet(N ~ Beat + HourType, modelDat, size=8, decay=0.1, maxit=1000)
nb <- naiveBayes(N ~ Beat + HourType, modelDat)
nb <- naiveBayes(N ~ Beat + HourType, modelDat)
nb
s <- svm(N ~ Beat + HourType, modelDat)
s
mars <- earth(N ~ Beat + HourType, modelDat)
mars
m <- randomForest(N ~ Beat + HourType, modelDat)
rpart <- rpartXse(N ~ Beat + HourType, modelDat)
rpart
prp(rpart,type=4,extra=101)
library(rpart.plot)
library(DMwR)
library(rpart.plot)
library(rpart.plot)
prp(rpart,type=4,extra=101)
help(list)
help(vector)
help(predict)
nreps <- 10
scores <- list(nnet=vector("numeric",length=nreps),
naiveBayes=vector("numeric",length=nreps),
svm=vector("numeric",length=nreps),
earth=vector("numeric",length=nreps),
randomForest=vector("numeric",length=nreps),
rpartXse=vector("numeric",length=nreps))
n <- nrow(modelDat)
set.seed(1234)
for(i in 1:nreps) {
# random sample with replacement
sp <- sample(n,n,replace=TRUE)
# data splitting
tr <- modelDat[sp,]
ts <- modelDat[-sp,]
# model learning and prediction
m <- nnet(N ~ Beat + HourType,tr, size=8, decay=0.1, maxit=1000)
p <- predict(m,ts)
# evaluation
scores$nnet[i] <- mean((ts$N-p)^2)
#m <- naiveBayes(N ~ Beat + HourType,tr)
#p <- predict(m,ts)
#scores$naiveBayes[i] <- mean((ts$N-p)^2)
m <- svm(N ~ Beat + HourType,tr)
p <- predict(m,ts)
scores$svm[i] <- mean((ts$N-p)^2)
m <- earth(N ~ Beat + HourType,tr)
p <- predict(m,ts)
scores$earth[i] <- mean(abs(ts$N-p)^2)
#m <- randomForest(N ~ Beat + HourType,tr)
#p <- predict(m,ts)
#scores$randomForest[i] <- mean((ts$N-p)^2)
m <- rpartXse(N ~ Beat + HourType,tr)
p <- predict(m,ts)
scores$rpartXse[i] <- mean((ts$N-p)^2)
}
# calculating means and standard errors
#summary(scores$naiveBayes)
summary(scores$nnet)
summary(scores$svm)
summary(scores$earth)
#summary(scores$randomForest)
summary(scores$rpartXse)
res <- performanceEstimation(PredTask(N ~ Beat + HourType, modelDat, "w/o"), workflowVariants(learner=c("svm", "earth", "rpartXse")), EstimationTask(metrics = c("mse", "mae")))
plot(res)
#Mean Squared Error
#mse <- mean((trueVals-preds)^2)
#Root Mean Squared Error
#rmse <- sqrt(mse)
#Mean Absolute Error
#mae <- mean(abs(trueVals-preds))
#Normalized Mean Squared Error
#nmse <- sum((trueVals-preds)^2) / sum((trueVals-mean(trueVals))^2)
#Normalized Mean Absolute Error
#nmae <- sum(abs(trueVals-preds)) / sum(abs(trueVals-mean(trueVals)))
#Mean Average Percentage Error
#mape <- mean(abs(trueVals-preds)/trueVals)
#Correlation between the predictions and the true values
#corr <- cor(trueVals,preds)
nreps <- 10
scores <- list(nnet=vector("numeric",length=nreps),
naiveBayes=vector("numeric",length=nreps),
svm=vector("numeric",length=nreps),
earth=vector("numeric",length=nreps),
randomForest=vector("numeric",length=nreps),
rpartXse=vector("numeric",length=nreps))
n <- nrow(modelDat)
set.seed(1234)
for(i in 1:nreps) {
# random sample with replacement
sp <- sample(n,n,replace=TRUE)
# data splitting
tr <- modelDat[sp,]
ts <- modelDat[-sp,]
# model learning and prediction
m <- nnet(N ~ Beat + HourType,tr, size=8, decay=0.1, maxit=1000)
p <- predict(m,ts)
# evaluation
scores$nnet[i] <- mean((ts$N-p)^2)
m <- naiveBayes(N ~ Beat + HourType,tr)
p <- predict(m,ts)
scores$naiveBayes[i] <- mean((ts$N-p)^2)
m <- svm(N ~ Beat + HourType,tr)
p <- predict(m,ts)
scores$svm[i] <- mean((ts$N-p)^2)
m <- earth(N ~ Beat + HourType,tr)
p <- predict(m,ts)
scores$earth[i] <- mean(abs(ts$N-p)^2)
#m <- randomForest(N ~ Beat + HourType,tr)
#p <- predict(m,ts)
#scores$randomForest[i] <- mean((ts$N-p)^2)
m <- rpartXse(N ~ Beat + HourType,tr)
p <- predict(m,ts)
scores$rpartXse[i] <- mean((ts$N-p)^2)
}
# calculating means and standard errors
#summary(scores$naiveBayes)
summary(scores$nnet)
summary(scores$svm)
summary(scores$earth)
#summary(scores$randomForest)
summary(scores$rpartXse)
res <- performanceEstimation(PredTask(N ~ Beat + HourType, modelDat, "w/o"), workflowVariants(learner=c("svm", "earth", "rpartXse")), EstimationTask(metrics = c("mse", "mae")))
plot(res)
#Mean Squared Error
#mse <- mean((trueVals-preds)^2)
#Root Mean Squared Error
#rmse <- sqrt(mse)
#Mean Absolute Error
#mae <- mean(abs(trueVals-preds))
#Normalized Mean Squared Error
#nmse <- sum((trueVals-preds)^2) / sum((trueVals-mean(trueVals))^2)
#Normalized Mean Absolute Error
#nmae <- sum(abs(trueVals-preds)) / sum(abs(trueVals-mean(trueVals)))
#Mean Average Percentage Error
#mape <- mean(abs(trueVals-preds)/trueVals)
#Correlation between the predictions and the true values
#corr <- cor(trueVals,preds)
summary(scores$naiveBayes)
summary(scores$nnet)
summary(scores$svm)
summary(scores$earth)
#summary(scores$randomForest)
summary(scores$rpartXse)
res <- performanceEstimation(PredTask(N ~ Beat + HourType, modelDat, "w/o"), workflowVariants(learner=c("svm", "earth", "rpartXse")), EstimationTask(metrics = c("mse", "mae")))
plot(res)
help(performanceEstimation)
getwd()
#Load the packages
library(gdata)
library(lubridate)
library(xts)
library(dplyr)
library(stringr)
library(DMwR)
library(class)
library(nnet)
library(e1071)
library(earth)
library(randomForest)
library(performanceEstimation)
library(DMwR)
library(rpart.plot)
perldir <- Sys.which("perl")
fc <- "crime.xls"
dat <- read.xls(fc, sheet = 1, header = TRUE, verbose=FALSE, perl=perldir, na.strings = "UNK")
dat$BlockRange <- as.character(dat$BlockRange)
dat$StreetName <- as.character(dat$StreetName)
dat$Type <- as.character(dat$Type)
dat$Suffix <- as.character(dat$Suffix)
unique(dat$Offense.Type)
dat[dat$Offense.Type == 1,]
dat[!grep("^[0-9]{4}-[0-9]{2}-[0-9]{2}$", dat$Date),]
dat[dat$Hour < 0 | dat$Hour > 23,]
dat[!grep("^[0-9]{2}$", dat$Hour),]
unique(dat$Beat)
nrow(dat[is.na(dat$Beat),])
nrow(dat[is.na(dat$BlockRange),])
unique(dat$Type)
nrow(dat[dat$Type == "-",])
unique(dat$Suffix)
nrow(dat[dat$Suffix == "-",])
unique(dat$X..offenses)
unique(dat$X..offenses)
dim(dat)
names(dat)
help(names)
str(dat)
attributes(dat)
load("gps.RData")
incomplete <- is.na(dat$Beat)
tr <- gps[!incomplete,1:2]
ts <- gps[incomplete,1:2]
dat$Beat[incomplete] <- knn(tr, ts, dat$Beat[!incomplete], k = 3)
incomplete <- (dat$Suffix == "-")
tr <- gps[!incomplete,1:2]
ts <- gps[incomplete,1:2]
dat$Suffix[incomplete] <- is.character(knn(tr, ts, dat$Suffix[!incomplete], k = 3))
incomplete <- is.na(dat$BlockRange)
dat$BlockRange[incomplete] <- centralValue(dat$BlockRange)
incomplete <- (dat$Type == "-")
dat$Type[incomplete] <- centralValue(dat$Type[!incomplete])
dat <- tbl_df(dat)
#View the data per hour
datxts <- xts(dat, ymd_h(paste(dat$Date,' ',dat$Hour)))
#Split the data into 3 categories
i1 <- filter(dat, 8 <= dat$Hour, dat$Hour < 12)
i2 <- filter(dat, 12 <= dat$Hour, dat$Hour < 19)
i3 <- filter(dat, (19 <= dat$Hour & dat$Hour <= 23) | (0 <= dat$Hour & dat$Hour < 8))
#How many Offenses are made per interval in each category
sum1 <- group_by(i1, Beat) %>% summarise(num=sum(X..offenses))
sum2 <- group_by(i2, Beat) %>% summarise(num=sum(X..offenses))
sum3 <- group_by(i3, Beat) %>% summarise(num=sum(X..offenses))
#How many offenses are made per offense type
sum4 <- group_by(dat, Offense.Type) %>% summarise(num=sum(X..offenses))
#How many offenses are made per offense type in each beat
sum5 <- group_by(dat, Offense.Type, Beat) %>% summarise(num=sum(X..offenses))
summary(dat)
View(dat)
View(dat)
View(dat)
View(dat)
barplot(c(sum(sum1$num), sum(sum2$num), sum(sum3$num)), names.arg = c("8-12", "12-19", "19-8"), main = "Total crimes over time intervals")
beat <- group_by(dat, Beat) %>% summarise(num=sum(X..offenses))
most <- head(arrange(beat,desc(num)))
barplot(most$num, names.arg=most$Beat, main="Beats with most crimes")
least <- head(arrange(beat, num))
barplot(least$num, names.arg=least$Beat, main="Beats with least crimes")
boxplot(beat$num, main="Distribution of number of crimes per beat")
offenses <- group_by(dat, Offense.Type) %>%
filter(Offense.Type != 1) %>% summarize(total=sum(X..offenses))
barplot(offenses$total, names.arg=offenses$Offense.Type,
main="Number of occurences per crime type")
fiscalDate <- function(arg) {
date <- arg[2]
hour <- arg[1]
if (as.integer(hour) >= 0 && as.integer(hour) < 8)
return(as.character(ymd(date)-1));
return(as.character(ymd(date)));
}
#Identification of the time period
hourType <- function(hour) {
hour <- as.integer(hour)
if (8 <= hour && hour < 12)
return(1)
if (12 <= hour && hour < 19)
return(2)
return(3)
}
args <- mapply(c, dat$Hour, as.character(dat$Date), SIMPLIFY = FALSE)
dat <- mutate(dat, HourType=sapply(Hour, hourType))
dat <- mutate(dat, FiscalDate=sapply(args, fiscalDate))
modelDat <- group_by(dat, FiscalDate, Beat, HourType) %>% summarize(N=sum(X..offenses))
#Neural Networks
nn <- nnet(N ~ Beat + HourType, modelDat, size=8, decay=0.1, maxit=1000)
#Naive Bayes
nb <- naiveBayes(N ~ Beat + HourType, modelDat)
#SVMs
s <- svm(N ~ Beat + HourType, modelDat)
#MARS
mars <- earth(N ~ Beat + HourType, modelDat)
#Random Forests
#m <- randomForest(N ~ Beat + HourType, modelDat)
#Tree-based
rpart <- rpartXse(N ~ Beat + HourType, modelDat)
prp(rpart,type=4,extra=101)
attributes(rpart)
print(rpart)
print(rpart$cptable)
help(print)
help
help(prp)
help(rpartXse)
help(cptable)
help(rpartXse$cptable)
plot(rpart)
text(bodyfat_rpart, use.n=T)
text(bodyfat_rpart)
date <- group_by(dat, Date) %>% summarize(total=sum(X..offenses))
barplot(date$total, names.arg=date$Date,
main="Number of occurences per crime type")
View(date)
date <- group_by(dat, Date) %>% summarize(total=sum(X..offenses))
barplot(date$total, names.arg=date$Date, main="Number of occurences per crime type")
View(date)
View(date)
Date
dat$Date
ymd_h(paste(dat$Date,' ',dat$Hour))
ymd(dat$Date)
y(dat$Date)
datxts
View(datxts)
dat[!grep("^[0-9]{4}-[0-9]{2}-[0-9]{2}$", dat$Date),]
unique(dat$Date)
View(date)
strsplit(dat$Date,"-")
View(dat)
strsplit(as.character(dat$Date),"-")
strsplit(as.character(dat$Date),"-")[]
strsplit(as.character(dat$Date),"-")[1]
strsplit(as.character(dat$Date),"-")[[1]]
strsplit(as.character(dat$Date),"-")[[1]][1]
strsplit(as.character(dat$Date),"-")[[]][1]
strsplit(as.character(dat$Date),"-")[1]
strsplit(as.character(dat$Date),"-")[,1]
strsplit(as.character(dat$Date),"-")
strsplit(as.character(dat$Date),"-")[][1]
strsplit(as.character(dat$Date),"-")[[]][1]
str(strsplit(as.character(dat$Date),"-"))
strsplit(as.character(dat$Date),"-")
as.matrix(strsplit(as.character(dat$Date),"-"))
tbl_df(strsplit(as.character(dat$Date),"-"))
strsplit(as.character(dat$Date),"-")
sapply(strsplit(as.character(dat$Date),"-"), function(x) x[1])
year <- sapply(strsplit(as.character(dat$Date),"-"), function(x) x[1])
str(year)
year <- sapply(strsplit(as.character(dat$Date),"-"), function(x) x[1])
years <- sapply(strsplit(as.character(dat$Date),"-"), function(x) x[1])
years <- unique(sapply(strsplit(as.character(dat$Date),"-"), function(x) x[1]))
years
View(date)
View(i1)
group_by(dat, Date)
date <- group_by(dat, Date) %>% group_by(sapply(strsplit(as.character(dat$Date),"-"), function(x) x[1]) == years) %>% summarize(total=sum(X..offenses))
filter(dat, 8 <= dat$Hour, dat$Hour < 12)
dim(years)
(years)
nclo(years)
ncol(years)
nrow(years)
length(years)
years[1]
years[2]
years[12]
help(data.frame)
new_dates <- data.frame()
new_dates
y <- filter(dat, sapply(strsplit(as.character(dat$Date),"-"), function(x) x[1]) == years[1])
y
View(y)
sum(y$X..offenses)
help(table)
table(dat$X..offenses)
help(data.frame)
y <- filter(dat, sapply(strsplit(as.character(dat$Date),"-"), function(x) x[1]) == years[1])
y
total = sum(y$X..offenses)
total
line <- data.frame(Year = years[i], Total = total)
line <- data.frame(Year = years[1], Total = total)
line
new_dates <- rbind_list(new_dates, line)
new_dates <- bind_rows(new_dates, line)
new_dates
new_dates <- data.frame()
new_dates
years <- unique(sapply(strsplit(as.character(dat$Date),"-"), function(x) x[1]))
dates <- data.frame()
for(i in length(years)) {
y <- filter(dat, sapply(strsplit(as.character(dat$Date),"-"), function(x) x[1]) == years[i])
total = sum(y$X..offenses)
line <- data.frame(Year = years[i], Total = total)
dates <- bind_rows(dates, line)
}
barplot(dates$total, names.arg=dates$Year, main="Number of occurences per year")
View(dates)
for(i in length(years)) {
y <- filter(dat, sapply(strsplit(as.character(dat$Date),"-"), function(x) x[1]) == years[i])
total = sum(y$X..offenses)
line <- data.frame(Year = years[i], Total = total)
dates <- bind_rows(dates, line)
}
y <- filter(dat, sapply(strsplit(as.character(dat$Date),"-"), function(x) x[1]) == years[i])
y
years <- unique(sapply(strsplit(as.character(dat$Date),"-"), function(x) x[1]))
dates <- data.frame()
years
dates
for(i in length(years)) {
y <- filter(dat, sapply(strsplit(as.character(dat$Date),"-"), function(x) x[1]) == years[i])
total = sum(y$X..offenses)
line <- data.frame(Year = years[i], Total = total)
dates <- bind_rows(dates, line)
}
dates
length(years)
y <- filter(dat, sapply(strsplit(as.character(dat$Date),"-"), function(x) x[1]) == years[i])
y
y <- filter(dat, sapply(strsplit(as.character(dat$Date),"-"), function(x) x[1]) == years[1])
y
for(t in length(years)) {
y <- filter(dat, sapply(strsplit(as.character(dat$Date),"-"), function(x) x[1]) == years[t])
total = sum(y$X..offenses)
line <- data.frame(Year = years[t], Total = total)
dates <- bind_rows(dates, line)
}
dates
for(t in length(years)) {
(y <- filter(dat, sapply(strsplit(as.character(dat$Date),"-"), function(x) x[1]) == years[t]))
total = sum(y$X..offenses)
line <- data.frame(Year = years[t], Total = total)
dates <- bind_rows(dates, line)
}
for(t in length(years)) {
y <- filter(dat, sapply(strsplit(as.character(dat$Date),"-"), function(x) x[1]) == years[t])
y
total = sum(y$X..offenses)
line <- data.frame(Year = years[t], Total = total)
dates <- bind_rows(dates, line)
}
years <- unique(sapply(strsplit(as.character(dat$Date),"-"), function(x) x[1]))
dates <- data.frame()
for(t in length(years)) {
y <- filter(dat, sapply(strsplit(as.character(dat$Date),"-"), function(x) x[1]) == years[t])
y
total = sum(y$X..offenses)
line <- data.frame(Year = years[t], Total = total)
dates <- bind_rows(dates, line)
}
barplot(dates$total, names.arg=dates$Year, main="Number of occurences per year")
years <- unique(sapply(strsplit(as.character(dat$Date),"-"), function(x) x[1]))
dates <- data.frame()
for(t in t:length(years)) {
y <- filter(dat, sapply(strsplit(as.character(dat$Date),"-"), function(x) x[1]) == years[t])
y
total = sum(y$X..offenses)
line <- data.frame(Year = years[t], Total = total)
dates <- bind_rows(dates, line)
}
barplot(dates$total, names.arg=dates$Year, main="Number of occurences per year")
dates
years <- unique(sapply(strsplit(as.character(dat$Date),"-"), function(x) x[1]))
dates <- data.frame()
for(t in 1:length(years)) {
y <- filter(dat, sapply(strsplit(as.character(dat$Date),"-"), function(x) x[1]) == years[t])
y
total = sum(y$X..offenses)
line <- data.frame(Year = years[t], Total = total)
dates <- bind_rows(dates, line)
}
barplot(dates$total, names.arg=dates$Year, main="Number of occurences per year")
years <- unique(sapply(strsplit(as.character(dat$Date),"-"), function(x) x[1]))
dates <- data.frame()
for(t in 1:length(years)) {
y <- filter(dat, sapply(strsplit(as.character(dat$Date),"-"), function(x) x[1]) == years[t])
total = sum(y$X..offenses)
line <- data.frame(Year = years[t], Total = total)
dates <- bind_rows(dates, line)
}
barplot(dates$total, names.arg=dates$Year, main="Number of occurences per year")
dates
View(date)
dates$Total
years <- unique(sapply(strsplit(as.character(dat$Date),"-"), function(x) x[1]))
dates <- data.frame()
for(t in 1:length(years)) {
y <- filter(dat, sapply(strsplit(as.character(dat$Date),"-"), function(x) x[1]) == years[t])
total = sum(y$X..offenses)
line <- data.frame(Year = years[t], Total = total)
dates <- bind_rows(dates, line)
}
barplot(dates$Total, names.arg=dates$Year, main="Number of occurences per year")
View(dates)
help(barplot)
