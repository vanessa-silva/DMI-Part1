if (attribute == "Beat" | attribute == "BlockRange")
result <- sum(filter(dat, value == dat$attribute)$X..offenses, na.rm = TRUE)
else
result <- sum(filter(dat, value == dat$attribute)$X..offenses)
}
else
result <- "error"
return(result)
}
help("filter")
filter(dat, date == dat$Date, beat == dat$Beat)
filter(dat, date == dat$Date)
num_offenses <- function (beat, date) filter(dat, beat == dat$Beat) %>% filter(dat, date == dat$Date)$X..offenses %>% sum()
num_offenses(10H10, 2015-01-24)
num_offenses("10H10", "2015-01-24")
num_offenses <- function (beat, date) filter(dat, beat == dat$Beat) %>% filter(date == dat$Date)$X..offenses %>% sum()
num_offenses("10H10", "2015-01-24")
num_offenses <- function (beat, date) sum(filter(filter(dat, beat == dat$Beat), date == dat$Date)$X..offenses)
num_offenses("10H10", "2015-01-24")
filter(dat, beat == dat$Beat)
filter(dat, "10H10" == dat$Beat)
filter(filter(dat, "10H10" == dat$Beat), "2015-01-24" == dat$Date)
filter(tbl_df(filter(dat, "10H10" == dat$Beat)), "2015-01-24" == dat$Date)
tbl_df(filter(dat, "10H10" == dat$Beat)
)
goup_by(Beat, Date)
group_by(Beat, Date)
group_by(dat, Beat)
group_by(dat, Beat) %>% group_by(Date)
num_offenses <- function (beat, date) sum(filter(dat, beat == dat$Beat & date == dat$Date)$X..offenses)
num_offenses("10H10", "2015-01-24")
filter(dat, beat == dat$Beat & date == dat$Date
)
filter(dat, beat == dat$Beat & date == dat$Date)
filter(dat, "10H10" == dat$Beat & "2015-01-24" == dat$Date)
dat %>% summarise(avg.Off=mean(dat$X..offenses),
cen.OffTp=centralValue(dat$Offense.Type),
cen.StrNm=centralValue(dat$StreetName))
library(dplyr)
dat %>% summarise(avg.Off=mean(dat$X..offenses),
cen.OffTp=centralValue(dat$Offense.Type),
cen.StrNm=centralValue(dat$StreetName))
install.packages("DMwR")
library(DMwR)
dat %>% summarise(avg.Off=mean(dat$X..offenses),
cen.OffTp=centralValue(dat$Offense.Type),
setwd(dir)
getwd()
#Install the necessary packages
install.packages("gdata")
install.packages("lubridate")
install.packages("xts")
install.packages("dplyr")
install.packages("DMwR")
#Load the packages
library(gdata)
library(lubridate)
library(xts)
library(dplyr)
library(stringr)
library(DMwR)
library(class)
perldir <- Sys.which("perl")
fc <- "crime.xls"
dat <- read.xls(fc, sheet = 1, header = TRUE, verbose=FALSE, perl=perldir, na.strings = "UNK")
dat$BlockRange <- as.character(dat$BlockRange)
dat$StreetName <- as.character(dat$StreetName)
dat$Type <- as.character(dat$Type)
dat$Suffix <- as.character(dat$Suffix)
unique(dat$Offense.Type)
dat[dat$Offense.Type == 1,]
#dat_clean <- dat[-(dat$Offense.Type == 1), ]
#dat <- subset(dat, dat$Offense.Type != 1)
dat[!grep("^[0-9]{4}-[0-9]{2}-[0-9]{2}$", dat$Date),]
dat[dat$Hour < 0 | dat$Hour > 23,]
dat[!grep("^[0-9]{2}$", dat$Hour),]
unique(dat$Beat)
nrow(dat[is.na(dat$Beat),])
load("gps.RData")
incomplete <- is.na(dat$Beat)
tr <- gps[!incomplete,1:2]
ts <- gps[incomplete,1:2]
dat$Beat[incomplete] <- knn(tr, ts, dat$Beat[!incomplete], k = 3)
View(gps)
View(gps)
View(tr)
View(tr)
View(ts)
View(ts)
incomplete
View(gps)
View(gps)
nrow(dat[is.na(dat$BlockRange),])
incomplete <- is.na(dat$BlockRange)
dat$BlockRange[incomplete] <- centralValue(dat$BlockRange)
unique(dat$Type)
nrow(dat[dat$Type == "-",])
unique(dat$Suffix)
nrow(dat[dat$Suffix == "-",])
unique(dat$X..offenses)
unique(dat$Suffix)
nrow(dat[dat$Suffix == "-",])
unique(dat$X..offenses)
dat <- tbl_df(dat)
#View the data per hour
datxts <- xts(dat, ymd_h(paste(dat$Date,' ',dat$Hour)))
#Split the data into 3 categories
i1 <- filter(dat, 8 <= dat$Hour, dat$Hour < 12)
i2 <- filter(dat, 12 <= dat$Hour, dat$Hour < 19)
i3 <- filter(dat, (19 <= dat$Hour & dat$Hour <= 23) | (0 <= dat$Hour & dat$Hour < 8))
#How many Offenses are made per interval in each category
sum1 <- group_by(i1, Beat) %>% summarise(num=sum(X..offenses))
sum2 <- group_by(i2, Beat) %>% summarise(num=sum(X..offenses))
sum3 <- group_by(i3, Beat) %>% summarise(num=sum(X..offenses))
#How many offenses are made per offense type
sum4 <- group_by(dat, Offense.Type) %>% summarise(num=sum(X..offenses))
plot(sum4$num ~ sum4$Offense.Type, xlab = "Offense.Type", ylab = "Num", main = "Number of offenses per offense type")
#How many offenses are made per offense type in each beat
sum5 <- group_by(dat, Offense.Type, Beat) %>% summarise(num=sum(X..offenses))
dat %>% summarise(avg.Off=mean(dat$X..offenses),
cen.OffTp=centralValue(dat$Offense.Type),
cen.StrNm=centralValue(dat$StreetName))
barplot(c(sum(sum1$num), sum(sum2$num), sum(sum3$num)), names.arg = c("8-12", "12-19", "19-8"), main = "Total crimes over time intervals")
beat <- group_by(dat, Beat) %>% summarise(num=sum(X..offenses))
most <- head(arrange(beat,desc(num)))
barplot(most$num, names.arg=most$Beat, main="Beats with most crimes")
least <- head(arrange(beat, num))
barplot(least$num, names.arg=least$Beat, main="Beats with least crimes")
boxplot(beat$num, main="Distribution of number of crimes per beat")
offenses <- group_by(dat, Offense.Type) %>%
filter(Offense.Type != 1) %>% summarize(total=sum(X..offenses))
barplot(offenses$total, names.arg=offenses$Offense.Type,
main="Number of occurences per crime type")
plot(sum4$num ~ sum4$Offense.Type, xlab = "Offense.Type", ylab = "Num", main = "Number of offenses (per offense)")
#Install the necessary packages
install.packages("gdata")
install.packages("lubridate")
install.packages("xts")
install.packages("dplyr")
install.packages("DMwR")
install.packages("lubridate")
install.packages("gdata")
install.packages("dplyr")
install.packages("xts")
install.packages("DMwR")
install.packages("gdata")
install.packages("gdata")
install.packages("gdata")
setwd(dir)
setwd(dir)
setwd(dir)
library(gdata)
perldir <- Sys.which("perl")
# one last try
if (perldir == "" & .Platform$OS.type == "windows")
perldir <- "C:\\Perl64\\bin\\perl.exe"
fc <- "crime.xls"
dat <- read.xls(fc, sheet = 1, header = TRUE, verbose=FALSE, perl=perldir)
#dat$Beat <- as.character(dat$Beat)
unique(dat$Offense.Type)
dat <- subset(dat, dat$Offense.Type != 1)
unique(dat$Beat)
#unique(dat$Premise)
unique(dat$Hour)
library(lubridate)
library(xts)
library(dplyr)
library(DMwR)
dat <- tbl_df(dat)
datxts <- xts(dat, ymd_h(paste(dat$Date,' ',dat$Hour)))
i1 <- filter(dat, 8 <= dat$Hour, dat$Hour < 12)
i2 <- filter(dat, 12 <= dat$Hour, dat$Hour < 19)
i3 <- filter(dat, (19 <= dat$Hour & dat$Hour <= 23) | (0 <= dat$Hour & dat$Hour < 8))
sum1 <- group_by(i1, Beat) %>% summarise(num=sum(X..offenses))
sum2 <- group_by(i2, Beat) %>% summarise(num=sum(X..offenses))
sum3 <- group_by(i3, Beat) %>% summarise(num=sum(X..offenses))
sum4 <- group_by(dat, Offense.Type) %>% summarise(num=sum(X..offenses))
sum5 <- group_by(dat, Offense.Type, Beat) %>% summarise(num=sum(X..offenses))
#Data Summarization
dat %>% summarise(avg.Off=mean(dat$X..offenses),
cen.OffTp=centralValue(dat$Offense.Type),
cen.StrNm=centralValue(dat$StreetName))
sum1_ <- group_by(i1, Beat) %>% summarise(num=sum(X..offenses)/length(unique(i1$Date)))
dat[2]
dat[1]
fiscalDate <- function(arg) {
date <- arg[1]
hour <- arg[2]
if (as.integer(hour) >= 0 && as.integer(hour) < 8)
return(as.character(ymd(date)-1));
return(as.character(ymd(date)));
}
hourType <- function(hour) {
hour <- as.integer(hour)
if (8 <= hour && hour < 12)
return(1)
if (12 <= hour && hour < 19)
return(2)
return(3)
}
args <- mapply(c, dat$Hour, as.character(dat$Date), SIMPLIFY = FALSE)
dat <- mutate(dat, HourType=sapply(Hour, hourType))
dat <- mutate(dat, FiscalDate=sapply(args, fiscalDate))
fiscalDate(dat)
args
install.packages("e1071")
install.packages("earth")
install.packages("randomForest")
library(nnet)
install.packages("nnet")
library(e1071)
library(earth)
library(randomForest)
install.packages("plotmo")
install.packages("plotrix")
install.packages("TeachingDemos")
library(e1071)
library(earth)
library(randomForest)
fiscalDate <- function(arg) {
date <- arg[2]
hour <- arg[1]
if (as.integer(hour) >= 0 && as.integer(hour) < 8)
return(as.character(ymd(date)-1));
return(as.character(ymd(date)));
}
#Identification of the time period
hourType <- function(hour) {
hour <- as.integer(hour)
if (8 <= hour && hour < 12)
return(1)
if (12 <= hour && hour < 19)
return(2)
return(3)
}
args <- mapply(c, dat$Hour, as.character(dat$Date), SIMPLIFY = FALSE)
dat <- mutate(dat, HourType=sapply(Hour, hourType))
args
args <- mapply(c, dat$Hour, as.character(dat$Date), SIMPLIFY = FALSE)
dat <- mutate(dat, HourType=sapply(Hour, hourType))
library(gdata)
library(lubridate)
library(xts)
library(dplyr)
library(stringr)
library(DMwR)
library(class)
library(nnet)
library(e1071)
library(earth)
library(randomForest)
dat <- mutate(dat, HourType=sapply(Hour, hourType))
View(dat)
View(dat)
dat <- mutate(dat, FiscalDate=sapply(args, fiscalDate))
View(dat)
View(dat)
View(dat)
View(dat)
modelDat <- group_by(dat, FiscalDate, Beat, HourType) %>% summarize(N=sum(X..offenses))
View(modelDat)
View(modelDat)
View(modelDat)
View(modelDat)
View(dat)
View(dat)
help(nnet)
sp <- sample(1:nrow(dat), as.integer(nrow(dat)*0.7))
tr <- dat[sp,]
ts <- dat[-sp,]
View(tr)
View(tr)
library(mlbench)
data(Vehicle)
install.packages("mlbench")
library(mlbench)
data(Vehicle)
View(Vehicle)
View(Vehicle)
l <- lda(X..offenses ~ ., tr)
install.packages("MASS")
library(MASS)
l <- lda(X..offenses ~ ., tr)
help(lda)
l <- lda(X..offenses ~ Beat + HourType, tr)
View(ts)
View(ts)
l
l <- lda(X..offenses ~ Beat + HourType, tr)
library(DMwR)
la1 <- lm(X..offenses ~ Beat + HourType, dat)
la1
summary(la1)
help(step)
final_la <- step(la)
la <- lm(X..offenses ~ Beat + HourType, dat)
summary(la)
final_la <- step(la)
summary(final_la)
preds <- predict(final_la, dat)
preds
install.packages("rpart.plot")
library(rpart.plot)
help(rpartXse)
ar <- rpartXse(dat ~ Beat + HourType, tr)
ar <- rpartXse(modelDat ~ Beat + HourType, tr)
ar <- rpartXse(X..offenses ~ Beat + HourType, tr)
ar
help(prp)
prp(ar,type=4,extra=101)
ar <- rpartXse(X..offenses ~ Beat + HourType, ts)
prp(ar,type=4,extra=101)
help(prp)
prp(ar,type=0,extra=101)
help(set.seed)
nb <- naiveBayes(modelDat ~ Beat + HourType, tr)
nb <- naiveBayes(X..offenses ~ Beat + HourType, tr)
nb
sp <- sample(1:nrow(modelDat), as.integer(nrow(modelDat)*0.7))
tr <- modelDat[sp,]
ts <- modelDat[-sp,]
nb <- naiveBayes(X..offenses ~ Beat + HourType, tr)
nb <- naiveBayes(N ~ Beat + HourType, tr)
nb
(mtrx <- table(predict(nb,ts),ts$N))
View(ts)
View(ts)
#Load the packages
library(gdata)
library(lubridate)
library(xts)
library(dplyr)
library(stringr)
library(DMwR)
library(class)
library(nnet)
library(e1071)
library(earth)
library(randomForest)
perldir <- Sys.which("perl")
fc <- "crime.xls"
dat <- read.xls(fc, sheet = 1, header = TRUE, verbose=FALSE, perl=perldir, na.strings = "UNK")
dat$BlockRange <- as.character(dat$BlockRange)
dat$StreetName <- as.character(dat$StreetName)
dat$Type <- as.character(dat$Type)
dat$Suffix <- as.character(dat$Suffix)
unique(dat$Offense.Type)
dat[dat$Offense.Type == 1,]
dat[!grep("^[0-9]{4}-[0-9]{2}-[0-9]{2}$", dat$Date),]
dat[dat$Hour < 0 | dat$Hour > 23,]
dat[!grep("^[0-9]{2}$", dat$Hour),]
unique(dat$Beat)
nrow(dat[is.na(dat$Beat),])
nrow(dat[is.na(dat$BlockRange),])
unique(dat$Type)
nrow(dat[dat$Type == "-",])
unique(dat$Suffix)
nrow(dat[dat$Suffix == "-",])
unique(dat$X..offenses)
load("gps.RData")
incomplete <- is.na(dat$Beat)
tr <- gps[!incomplete,1:2]
ts <- gps[incomplete,1:2]
dat$Beat[incomplete] <- knn(tr, ts, dat$Beat[!incomplete], k = 3)
load("gps.RData")
incomplete <- is.na(dat$Beat)
tr <- gps[!incomplete,1:2]
ts <- gps[incomplete,1:2]
dat$Beat[incomplete] <- knn(tr, ts, dat$Beat[!incomplete], k = 3)
incomplete <- is.na(dat$BlockRange)
dat$BlockRange[incomplete] <- centralValue(dat$BlockRange)
incomplete <- is.na(dat$Type)
dat$Type[incomplete] <- centralValue(dat$Type)
incomplete <- is.na(dat$Suffix)
#... see on GPS?
dat <- tbl_df(dat)
#View the data per hour
datxts <- xts(dat, ymd_h(paste(dat$Date,' ',dat$Hour)))
#Split the data into 3 categories
i1 <- filter(dat, 8 <= dat$Hour, dat$Hour < 12)
i2 <- filter(dat, 12 <= dat$Hour, dat$Hour < 19)
i3 <- filter(dat, (19 <= dat$Hour & dat$Hour <= 23) | (0 <= dat$Hour & dat$Hour < 8))
#How many Offenses are made per interval in each category
sum1 <- group_by(i1, Beat) %>% summarise(num=sum(X..offenses))
sum2 <- group_by(i2, Beat) %>% summarise(num=sum(X..offenses))
sum3 <- group_by(i3, Beat) %>% summarise(num=sum(X..offenses))
#How many offenses are made per offense type
sum4 <- group_by(dat, Offense.Type) %>% summarise(num=sum(X..offenses))
#How many offenses are made per offense type in each beat
sum5 <- group_by(dat, Offense.Type, Beat) %>% summarise(num=sum(X..offenses))
dat %>% summarise(avg.Off=mean(dat$X..offenses),
cen.OffTp=centralValue(dat$Offense.Type),
cen.StrNm=centralValue(dat$StreetName))
barplot(c(sum(sum1$num), sum(sum2$num), sum(sum3$num)), names.arg = c("8-12", "12-19", "19-8"), main = "Total crimes over time intervals")
beat <- group_by(dat, Beat) %>% summarise(num=sum(X..offenses))
most <- head(arrange(beat,desc(num)))
barplot(most$num, names.arg=most$Beat, main="Beats with most crimes")
least <- head(arrange(beat, num))
barplot(least$num, names.arg=least$Beat, main="Beats with least crimes")
boxplot(beat$num, main="Distribution of number of crimes per beat")
offenses <- group_by(dat, Offense.Type) %>%
filter(Offense.Type != 1) %>% summarize(total=sum(X..offenses))
barplot(offenses$total, names.arg=offenses$Offense.Type,
main="Number of occurences per crime type")
fiscalDate <- function(arg) {
date <- arg[2]
hour <- arg[1]
if (as.integer(hour) >= 0 && as.integer(hour) < 8)
return(as.character(ymd(date)-1));
return(as.character(ymd(date)));
}
#Identification of the time period
hourType <- function(hour) {
hour <- as.integer(hour)
if (8 <= hour && hour < 12)
return(1)
if (12 <= hour && hour < 19)
return(2)
return(3)
}
args <- mapply(c, dat$Hour, as.character(dat$Date), SIMPLIFY = FALSE)
dat <- mutate(dat, HourType=sapply(Hour, hourType))
dat <- mutate(dat, FiscalDate=sapply(args, fiscalDate))
##Descriptors: Beat and HourType
##Target variable: X..offenses
modelDat <- group_by(dat, FiscalDate, Beat, HourType) %>% summarize(N=sum(X..offenses))
library(e1071)
sp <- sample(1:nrow(modelDat), as.integer(nrow(modelDat)*0.7))
tr <- modelDat[sp,]
ts <- modelDat[-sp,]
nb <- naiveBayes(N ~ Beat + HourType, tr)
(mtrx <- table(predict(nb,ts),ts$N))
nb
ped <- predict(nb,ts)
pred <- predict(nb,ts)
View(ts)
View(ts)
pred
View(modelDat)
View(modelDat)
nrow(dat[is.na(modelDat$FiscalDate),])
nrow(dat[is.na(modelDat$Beat),])
nrow(dat[is.na(modelDat$HourType),])
nrow(dat[is.na(modelDat$N),])
nrow(modelDat[is.na(modelDat$N),])
nrow(modelDat[is.na(modelDat$FiscalDate),])
nrow(modelDat[is.na(modelDat$HourType),])
nrow(modelDat[is.na(modelDat$Beat),])
nrow(ts[is.na(ts$Beat),])
nrow(ts[is.na(ts$N),])
nrow(ts[is.na(ts$HourType),])
nrow(ts[is.na(ts$FiscalDate),])
pred <- predict(nb,ts)
pred <- predict(as.matrix(nb),as.matrix(ts))
help("as.data.frame")
pred <- predict(as.data.frame(nb),as.data.frame(ts))
pred <- predict(nb,as.data.frame(ts))
pred <- predict(nb,as.matrix(ts))
pred <- predict(nb, ts)
nb <- naiveBayes(N ~ Beat + HourType, tr, laplace=1)
nb
pred <- predict(nb, ts)
s <- svm(N ~ Beat + HourType,tr)
predict(s,ts)
s
s
predict()
pred(s,ts)
s <- svm(N ~ Beat + HourType,tr)
pred(s,ts)
pred <- predict(s,ts)
pred
ps <- predict(s,ts)
table(ps,ts$N)
mc <- table(ps,ts$N)
mc
(error <- 100*(1-sum(diag(mc))/sum(mc)))
s <- svm(N ~ Beat + HourType, tr, cost=10, epsilon=0.02)
s
pred <- predict(s,ts)
regr.eval(ts$N, pred)
plot(ts$N, pred, main='Errors Scaterplot', ylab='Predictions', xlab='True')
abline(0,1,col='red',lty=2)
help(factor)
preds_ <- predict(factor(nb_levels=levels(factor(ts$N))), ts)
library(nnet)
nn <- nnet(N ~ Beat + HourType, tr, size=8, decay=0.1, maxit=1000)
(mtrx <- table(predict(nn,ts,type='class'),ts$N))
help("predict")
help(predict)
(mtrx <- table(predict(nn,ts),ts$N))
nn
summary(nn)
nn
head(predict(nn,ts))
predict(nn,ts)
mars <- earth(N ~ Beat + HourType, tr)
mars
preds <- predict(mars,ts)
preds
summary(mars)
library(randomForest)
m <- randomForest(N ~ Beat + HourType, tr)
tr
m <- randomForest(N ~ Beat + HourType, tr)
help(randomForest)
m <- randomForest(N ~ Beat + HourType, tr)
m <- rpartXse(N ~ Beat + HourType,tr)
p <- predict(m,ts)
m
p
regr.eval(ts$N,p,train.y=tr$N)
